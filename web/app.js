const express = require('express');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'static')));
app.use('/data', express.static(path.join(__dirname, 'data')));

// Load OSM data (ensure these files exist, generated by MATLAB)
const roadData = JSON.parse(fs.readFileSync(path.join(__dirname, 'data', 'road_data.json')));
const petrolPumpData = JSON.parse(fs.readFileSync(path.join(__dirname, 'data', 'petrol_pump_data.json')));

app.post('/estimate', (req, res) => {
    const { Re, Rct, temperature, SoC, latitude,  longitude} = req.body;
    const outputFile = path.join(__dirname, 'data', 'matlab_output.json');
    // Prepare MATLAB command
    // Use double backslashes for Windows paths in MATLAB
    const matlabScriptPath = path.join(__dirname, 'train_and_estimate.m').replace(/\\/g, '/');
    const outputFileMatlab = outputFile.replace(/\\/g, '/');
    const matlabCmd = `matlab -batch "addpath('${path.dirname(matlabScriptPath)}'); train_and_estimate(${Re},${Rct},${temperature},'${outputFileMatlab}'); exit;"`;
    exec(matlabCmd, (error, stdout, stderr) => {
        if (error) {
            console.error('MATLAB error:', stderr);
            return res.status(500).json({ error: 'MATLAB execution failed', details: stderr });
        }
        fs.readFile(outputFile, 'utf8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Failed to read MATLAB output' });
            }
            let result;
            try {
                result = JSON.parse(data);
            } catch (e) {
                return res.status(500).json({ error: 'Invalid MATLAB output' });
            }
            const estimatedRange = calculateRange((result.soh)/100, SoC/100);

            // Find nearest charging station
            let nearestStation = 'No station found';
            let minDist = Infinity;
            let nearestCoords = null;

            if (
                petrolPumpData.elements &&
                petrolPumpData.elements.length > 0 &&
                typeof latitude === 'number' &&
                typeof longitude === 'number'
            ) {
                petrolPumpData.elements.forEach(station => {
                    if (station.lat && station.lon) {
                        const dist = haversine(latitude, longitude, station.lat, station.lon);
                        if (dist < minDist) {
                            minDist = dist;
                            nearestStation = station.tags && station.tags.name ? station.tags.name : 'Unnamed Station';
                            nearestCoords = { lat: station.lat, lon: station.lon };
                        }
                    }
                });
            }

            res.status(200).json({
                soh: result.soh,
                soc: SoC,
                range: estimatedRange,
                nearest_station: nearestStation,
                nearest_station_coords: nearestCoords,
                dist_to_station_km: minDist === Infinity ? null : Math.round(minDist * 100) / 100
            });
        });
    });
});

function haversine(lat1, lon1, lat2, lon2) {
    function toRad(x) { return x * Math.PI / 180; }
    const R = 6371; // Earth radius in km
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

function calculateRange(SoH, SoC) {
    const C_nom_Ah = 75;          // Nominal capacity in Ah (≈26 kWh pack)
    const V_nom_V = 350;          // Nominal voltage in V
    const eta_drivetrain = 0.9;   // Drivetrain + inverter efficiency
    const SoC_min = 0.10;         // Minimum usable SOC (10%)
    const e_cons_Wh_per_km = 180; // Average consumption in Wh/km (urban + highway mix in India)
    const P_aux_kW = 1.5;         // Auxiliaries (AC, lights, etc.)
    const v_kmh = 40;             // Avg. city driving speed (km/h)
    const f_regen = 0.15;         // Regen recovery fraction (≈15%)
    
    const usable_frac = Math.max(0, SoC - SoC_min); 
    const E_usable_Wh = C_nom_Ah * V_nom_V * SoH * usable_frac; 
    const E_deliverable_Wh = E_usable_Wh * eta_drivetrain;

    // Aux consumption per km (Wh/km)
    const e_aux_Wh_per_km = (P_aux_kW * 1000) / v_kmh;

    // Effective consumption with regen
    const e_cons_eff = e_cons_Wh_per_km * (1 - f_regen);

    // Final range in km
    const denom = e_cons_eff + e_aux_Wh_per_km;
    const R_km = (denom > 0) ? (E_deliverable_Wh / denom) : 0;

    return Math.round(R_km);
}

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});